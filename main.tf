terraform {
  required_providers {
    yandex = {
      source  = "yandex-cloud/yandex"
      version = ">= 0.89.0"
    }
  }
}

provider "yandex" {
  token            = "y0_***"
  cloud_id         = "b1***"
  folder_id        = "b1***"
  zone             = "ru-central1-a"
  storage_endpoint = "storage.yandexcloud.net"
}

# 1. Создаем новый сервисный аккаунт для Storage
resource "yandex_iam_service_account" "storage_sa" {
  name        = "marat-storage-sa-${formatdate("YYYYMMDDhhmmss", timestamp())}"
  description = "Autogenerated service account for Object Storage"
}

resource "yandex_resourcemanager_folder_iam_binding" "storage_admin" {
  folder_id = "b1***"
  role      = "storage.admin"
  members   = ["serviceAccount:${yandex_iam_service_account.storage_sa.id}"]
}

resource "yandex_iam_service_account_static_access_key" "storage_key" {
  service_account_id = yandex_iam_service_account.storage_sa.id
  description        = "Static key for bucket access"
}

# 2. Создаем бакет с уникальным именем
resource "yandex_storage_bucket" "bucket" {
  bucket     = "marat-bucket-${formatdate("YYYYMMDDhhmmss", timestamp())}"
  access_key = yandex_iam_service_account_static_access_key.storage_key.access_key
  secret_key = yandex_iam_service_account_static_access_key.storage_key.secret_key
  acl        = "public-read"

  lifecycle {
    prevent_destroy = false
  }
}

# 3. Загружаем изображение
resource "yandex_storage_object" "image" {
  depends_on     = [yandex_storage_bucket.bucket]
  bucket        = yandex_storage_bucket.bucket.bucket
  key           = "cat-${formatdate("hhmmss", timestamp())}.jpeg"
  source        = "/home/marat/kube3/terraform2/cat.jpeg"
  acl           = "public-read"
  access_key    = yandex_iam_service_account_static_access_key.storage_key.access_key
  secret_key    = yandex_iam_service_account_static_access_key.storage_key.secret_key
  content_type  = "image/jpeg"
}

# 4. Сервисный аккаунт для Compute
resource "yandex_iam_service_account" "vm_sa" {
  name        = "marat-vm-sa-${formatdate("YYYYMMDDhhmmss", timestamp())}"
  description = "Service account for Compute instances"
}

resource "yandex_resourcemanager_folder_iam_binding" "vm_editor" {
  folder_id = "b1gsc7ktg25hauprdres"
  role      = "editor"
  members   = ["serviceAccount:${yandex_iam_service_account.vm_sa.id}"]
}

# 5. Сеть и подсеть
resource "yandex_vpc_network" "network" {
  name = "marat-network-${formatdate("YYYYMMDD", timestamp())}"
}

resource "yandex_vpc_subnet" "subnet" {
  name           = "marat-subnet-${formatdate("YYYYMMDD", timestamp())}"
  zone           = "ru-central1-a"
  network_id     = yandex_vpc_network.network.id
  v4_cidr_blocks = ["192.168.10.0/24"]
}

# 6. Группа ВМ
resource "yandex_compute_instance_group" "vm_group" {
  name               = "marat-vm-group-${formatdate("YYYYMMDD", timestamp())}"
  folder_id          = "b1gsc7ktg25hauprdres"
  service_account_id = yandex_iam_service_account.vm_sa.id

  instance_template {
    platform_id = "standard-v3"
    
    resources {
      cores  = 2
      memory = 2
    }

    boot_disk {
      initialize_params {
        image_id = "fd827b91d99psvq5fjit"
      }
    }

    network_interface {
      network_id = yandex_vpc_network.network.id
      subnet_ids = [yandex_vpc_subnet.subnet.id]
      nat        = true
    }

    metadata = {
      user-data = <<-EOF
        #!/bin/bash
        apt-get update
        apt-get install -y apache2 php libapache2-mod-php mysql-server php-mysql
        systemctl start apache2
        systemctl enable apache2
        
        cat > /var/www/html/index.html <<EOL
        <!DOCTYPE html>
        <html>
        <head>
            <title>Marat's LAMP</title>
        </head>
        <body>
            <h1>Welcome to Marat's LAMP</h1>
            <img src="https://${yandex_storage_bucket.bucket.bucket}.storage.yandexcloud.net/${yandex_storage_object.image.key}" width="500">
        </body>
        </html>
        EOL
      EOF
    }
  }

  scale_policy {
    fixed_scale {
      size = 3
    }
  }

  allocation_policy {
    zones = ["ru-central1-a"]
  }

  deploy_policy {
    max_unavailable = 1
    max_expansion   = 0
  }
}

# 7. Целевая группа
resource "yandex_lb_target_group" "target_group" {
  depends_on = [yandex_compute_instance_group.vm_group]
  name      = "marat-tg-${formatdate("YYYYMMDD", timestamp())}"
  region_id = "ru-central1"

  dynamic "target" {
    for_each = yandex_compute_instance_group.vm_group.instances
    content {
      subnet_id  = yandex_vpc_subnet.subnet.id
      address    = target.value.network_interface[0].ip_address
    }
  }
}

# 8. Балансировщик нагрузки
resource "yandex_lb_network_load_balancer" "balancer" {
  depends_on = [yandex_lb_target_group.target_group]
  name = "marat-balancer-${formatdate("YYYYMMDD", timestamp())}"

  listener {
    name = "http-listener"
    port = 80
    external_address_spec {
      ip_version = "ipv4"
    }
  }

  attached_target_group {
    target_group_id = yandex_lb_target_group.target_group.id

    healthcheck {
      name = "http"
      http_options {
        port = 80
        path = "/"
      }
    }
  }
}

output "bucket_url" {
  value = "https://${yandex_storage_bucket.bucket.bucket}.storage.yandexcloud.net"
}

output "image_url" {
  value = "https://${yandex_storage_bucket.bucket.bucket}.storage.yandexcloud.net/${yandex_storage_object.image.key}"
}

output "load_balancer_ip" {
  value = one(yandex_lb_network_load_balancer.balancer.listener[*].external_address_spec[*].address)
}